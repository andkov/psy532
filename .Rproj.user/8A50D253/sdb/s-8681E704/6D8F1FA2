{
    "contents" : "# rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.\n# cat(\"\\014\")\n\n# ds <- readRDS(\"./data/simulated/dsX.rds\")\n# mdl <- glm(formula=iq ~ 1 + ses + parent_edu + house_cost, data=ds)\n# mdl\n# summod <- summary(mdl)\n# \n# # parameter estimates\n# summod$coefficients             \n# EF_value=120\n# dfF_value=5\n# ER_value=336\n# dfR_value=6\n\ncreate_data <- function(EF_value=120, dfF_value=5, ER_value=336, dfR_value=6){\n# sample_size <- 6\n# degrees of freedom of the models\n(dfF <- dfF_value)                     # FULL            ( df ERROR)    \n(dfR <- dfR_value)                  # RESTRICTED      ( df TOTAL)    \n(dfD <- dfR - dfF)                   # DIFFERENCE      ( df RESIDUAL) - gain in complexity / loss of simplicity\n\n# misfit of the models\n(SSE <- EF_value);EF <- SSE          # FULL            (SS Error) - (EF)\n(SST <- ER_value); ER <- SST      # RESTRICTED      (SS Total) - (ER)\n(SSR <- SST - SSE)                   # DIFFERENCE      (SS Resisudal) - gain in accurcy / loss of misfit\n\n# accuracy vs parsimony \n(MSE <- EF / dfF)                     # FULL            (Mean Square Error)  \n(MST <- ER / dfR)                     # RESTRICTED      (Mean Square Total)\n(MSR <- (ER - EF) / (dfR - dfF))      # DIFFERENCE      (Mean Square Residual); (MSR <-SSR/dfR)\n\n\n# collect squared error in a vector \n(SS_value <- c( EF, ER, ER - EF)) # Full , Restricted, Difference\n# collect degrees of freedom in a vector\n(df_value <- c(dfF, dfR, dfD)) # Full , Restricted, Difference \n# collected average squared error in a vector\n(MS_value <- c(MSE, MST, MSR)) # squared discrepancy per degree of freedom\n\n# Counterparts \nmodel_label <- c(\"Full\",    \"Restricted\",   \"Difference\")\nSS_Label    <- c(\"Error\",   \"Total\",        \"Residual\")\nSS_label    <- c(\"SSE\",     \"SST\",          \"SSR\")\nMS_label    <- c(\"MSE\",     \"MST\",          \"MSR\")\ndf_label    <- c(\"df(F)\",   \"df(R)\",        \"df(D)\")\n\n# misfit as area analogy: creating the squares\narea <- SS_value\nside <- sqrt(area) # sides of the SS square\norigin <- rep(1,3) # the bottom left corner of each square\nsideMS <- sqrt(MS_value) # side of the MS square\n\n# Create dataset for graphing  \n(d <- data.frame(model_label, SS_Label, SS_label, SS_value, \n                 df_label, df_value, MS_label, MS_value, origin, area, side, sideMS))\n# create an auxilary column that numbers the models\n(d$position <-  c(3, 1, 2))\n# sort the dataframe in the descending order of model number\n(d <- d[order(d$position),])\nd$SS_value <- round(d$SS_value,2)\nd$MS_value <- round(d$MS_value,2)\n\nd$dfD <- d[d$MS_label==\"MSR\", \"df_value\"]\nd$dfF <- d[d$MS_label==\"MSE\", \"df_value\"]\nd$Ftest <- d[d$MS_label==\"MSR\", \"MS_value\"] / d[d$MS_label==\"MSE\", \"MS_value\"]\nd$Fcrit <- qf(.95, df1=d[d$MS_label==\"MSR\", \"df_value\"], df2=d[d$MS_label==\"MSE\", \"df_value\"]) # find F critical\nd$label1 <- paste0(\"F (\",d$dfD,\",\",d$dfF,\") = \", round(d$Ftest,2),\"  (observed)\")\nd$label2 <- paste0(\"F (\",d$dfD,\",\",d$dfF,\") = \", round(d$Fcrit,2), \"  (95% crit)\")\nd$unit_step <- max(d$side)/10\nd$max_value <- max(d$side) + d$unit_step\n\nreturn(d)\n}\n# d <- create_data()\n\n\nlibrary(ggplot2)\nsource(\"https://raw.githubusercontent.com/andkov/psy532/master/scripts/graphs/main_theme.R\")\nareaFcolors <- c( \"Full\"=\"blue\", \"Restricted\" = \"black\",\"Difference\" = \"red\")\n\n\nSS_graph <- function(d, scalemax){\n\ng <- ggplot2::ggplot() \ng <- g + ggtitle(\"Total misfit of the models\")\ng <- g + geom_rect(data=d, \n                   mapping=aes(xmin=origin, xmax=side, ymin=origin, ymax=side, \n                               color=model_label, fill=model_label), \n                   alpha=.1)\ng <- g + scale_x_continuous( limits=c(0, scalemax))\ng <- g + scale_y_continuous( limits=c(0, scalemax)) \ng <- g + scale_fill_manual(values = areaFcolors, guide=FALSE)\n  g <- g + scale_color_manual(values = areaFcolors, name=\"Model\", guide=guide_legend(reverse=TRUE))\ng <- g + main_theme\ng <- g + theme(\n             axis.title = element_blank(),\n             legend.text =  element_text(),\n             legend.position=\"bottom\")\ng\nreturn(g)\n}\n# SS_graph(d, max=200)\n# SS_graph(d)\n\n\nF_text <- function(d){\n\n  g <- ggplot2::ggplot(data=d)\n  g <- g + scale_x_continuous(limits=c(0,4))\n  # g <- g + scale_y_continuous(limits=c(-1,4))\n  g <- g + geom_text(mapping=aes(x = 0, y = rev(position)+1, color = model_label,\n                                 label = paste0(\n                                   SS_label, \" = \",  SS_value, \"  \", \n                                   df_label, \" = \",  df_value, \"  \", \n                                   MS_label, \" = \",  MS_value)),\n                     hjust=0)\n  g <- g + geom_text(aes(x=0, y = 1, label = label1 ),hjust=0)\n  g <- g + geom_text(aes(x=0, y = 0, label = label2 ),hjust=0)\n  g <- g + scale_color_manual(values=areaFcolors)\n  g <- g + main_theme\n  g <- g + theme(axis.text.y =  element_blank(),\n               axis.text.x =  element_blank(),\n               axis.title.x = element_blank(),\n               axis.title.y = element_blank(),\n               legend.title = element_blank(),\n               legend.text =  element_text(),\n               legend.position=\"none\",\n               panel.grid = element_blank(),\n               panel.border = element_blank(),\n               axis.ticks = element_blank())\n  g\n  return(g)\n}\n# F_text(d)\n\n\nMS_graph <- function(d, scalemax){\n\n  g <- ggplot2::ggplot() \n  g <- g + ggtitle(\"Misfit per degree of freedom\")\n  g <- g + geom_rect(data=d,\n                     mapping=aes(xmin=origin, xmax=sideMS, \n                                 ymin=origin, ymax=sideMS, color=model_label, fill=model_label), \n                     alpha=.1)\ng <- g + scale_x_continuous( limits=c(0, scalemax))\ng <- g + scale_y_continuous( limits=c(0, scalemax)) \n  g <- g + scale_fill_manual(values = areaFcolors, guide=FALSE)\n  g <- g + scale_color_manual(values = areaFcolors, name=\"Model\", guide=guide_legend(reverse=TRUE))\n  g <- g + main_theme\n  g <- g + theme(\n             legend.title = element_blank(),\n             legend.text =  element_text(),\n             legend.position=\"bottom\")\n  return(g)\n}\n# MS_graph(d, max=200)\n# MS_graph()\n\n\nvpLayout <- function(rowIndex, columnIndex) { return( viewport(layout.pos.row=rowIndex, layout.pos.col=columnIndex) ) }\nareaF <- function(misfit_full, df_full, misfit_reduced, df_reduced, scalemax=max(d$side)){\n  \n  d <- create_data(EF_value=misfit_full, dfF_value=df_full, ER_value=misfit_reduced, dfR_value=df_reduced)\n  print(d)\n   a <- SS_graph(d, scalemax)\n   b <- MS_graph(d, scalemax)\n   c <- F_text(d)\n  \n   grid.newpage()    \n  #Defnie the relative proportions among the panels in the mosaic.\n  layout <- grid.layout(nrow=3, ncol=3,\n                        widths=unit(c(.36, .28, .36) ,c(\"null\", \"null\",\"null\")),\n                        heights=unit(c(.38, .32, .2), c(\"null\", \"null\", \"null\"))\n  )\n  pushViewport(viewport(layout=layout))\n#   print(a, vp=vpLayout(1, 1))\n#   print(b, vp=vpLayout(1, 2))\n#   print(c, vp=viewport(layout.pos.row=2))\n  print(a, vp=viewport(layout.pos.col=1))\n  print(c, vp=vpLayout(2, 2))\n  print(b, vp=viewport(layout.pos.col=3))\n  \n  popViewport(0)\n   # return(c)\n}\n\n# BuildMosaic(120, 5, 336, 6, 20 )\n\n# areaF(6136.292, 26, 6525, 29, 20 )\n",
    "created" : 1443388074142.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "15|78|73|0|\n",
    "hash" : "2062838943",
    "id" : "6D8F1FA2",
    "lastKnownWriteTime" : 1443460559,
    "path" : "~/GitHub/psy532/scripts/graphs/areaF_graphing.R",
    "project_path" : "scripts/graphs/areaF_graphing.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "type" : "r_source"
}