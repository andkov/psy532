{
    "contents" : "rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.\ncat(\"\\014\")\n\n# ds <- readRDS(\"./data/simulated/dsX.rds\")\n# mdl <- glm(formula=iq ~ 1 + ses + parent_edu + house_cost, data=ds)\n# mdl\n# summod <- summary(mdl)\n# \n# # parameter estimates\n# summod$coefficients             \n# fit_full=100\n# df_full=9\n# fit_reduced=80\n# df_reduced=8\n\nlibrary(ggplot2)\nsource(\"https://raw.githubusercontent.com/andkov/psy532/master/scripts/graphs/main_theme.R\")\nareaFcolors <- c( \"Full\"=\"blue\", \"Restricted\" = \"black\",\"Difference\" = \"red\")\n\n\ncreate_data <- function(fun_EF=120, fun_dfF=5, fun_ER=336, fun_dfR=6){\n# sample_size <- 6\n# degrees of freedom of the models\n(dfF <- fun_dfF)                     # FULL            ( df ERROR)    \n(dfR <- fun_dfR)                  # RESTRICTED      ( df TOTAL)    \n(dfD <- dfR - dfF)                   # DIFFERENCE      ( df RESIDUAL) - gain in complexity / loss of simplicity\n\n# misfit of the models\n(SSE <- fun_EF);EF <- SSE          # FULL            (SS Error) - (EF)\n(SST <- fun_ER); ER <- SST      # RESTRICTED      (SS Total) - (ER)\n(SSR <- SST - SSE)                   # DIFFERENCE      (SS Resisudal) - gain in accurcy / loss of misfit\n\n# accuracy vs parsimony \n(MSE <- EF / dfF)                     # FULL            (Mean Square Error)  \n(MST <- ER / dfR)                     # RESTRICTED      (Mean Square Total)\n(MSR <- (ER - EF) / (dfR - dfF))      # DIFFERENCE      (Mean Square Residual); (MSR <-SSR/dfR)\n\n\n# collect squared error in a vector \n(SS_value <- c( EF, ER, ER - EF)) # Full , Restricted, Difference\n# collect degrees of freedom in a vector\n(df_value <- c(dfF, dfR, dfD)) # Full , Restricted, Difference \n# collected average squared error in a vector\n(MS_value <- c(MSE, MST, MSR)) # squared discrepancy per degree of freedom\n\n# Counterparts \nmodel_label <- c(\"Full\",    \"Restricted\",   \"Difference\")\nSS_Label    <- c(\"Error\",   \"Total\",        \"Residual\")\nSS_label    <- c(\"SSE\",     \"SST\",          \"SSR\")\nMS_label    <- c(\"MSE\",     \"MST\",          \"MSR\")\ndf_label    <- c(\"df(F)\",   \"df(R)\",        \"df(D)\")\n\n# misfit as area analogy: creating the squares\narea <- SS_value\nside <- sqrt(area) # sides of the SS square\norigin <- rep(1,3) # the bottom left corner of each square\nsideMS <- sqrt(MS_value) # side of the MS square\n\n# Create dataset for graphing  \n(d <- data.frame(model_label, SS_Label, SS_label, SS_value, \n                 df_label, df_value, MS_label, MS_value, origin, area, side, sideMS))\n# create an auxilary column that numbers the models\n(d$position <-  c(3, 1, 2))\n# sort the dataframe in the descending order of model number\n(d <- d[order(d$position),])\nd$SS_value <- round(d$SS_value,2)\nd$MS_value <- round(d$MS_value,2)\nreturn(d)\n}\n# d <- create_data(120, 5, 336, 6)\n# d <- create_data()\n\n\n# SS_graph <- function(d, maxSS=sqrt(max(d$SS_value))){\nSS_graph <- function(fit_full, df_full, fit_reduced , df_reduced){\n  \nd <- create_data(fun_EF = fit_full, fun_dfF = df_full, fun_ER = fit_reduced, fun_dfR = df_reduced)\n\nunit_step <- sqrt(max(d$SS_value))/10\nmaxSS_value <- sqrt(max(d$SS_value)) + unit_step\nmaxMS_value <- sqrt(max(d$MS_value))\nmaxMS_value <- maxMS_value + unit_step*(maxMS_value/maxSS_value)\n\ng <- ggplot2::ggplot() \ng <- g + ggtitle(\"Total misfit of the models\")\ng <- g + geom_rect(data=d, \n                   mapping=aes(xmin=origin, xmax=side, ymin=origin, ymax=side, \n                               color=model_label, fill=model_label), \n                   alpha=.1)\ng <- g + scale_x_continuous(name=\"x\", limits=c(0, scalemax))\ng <- g + scale_y_continuous(name=\"y\", limits=c(0, scalemax)) \ng <- g + scale_fill_manual(values = areaFcolors, guide=FALSE)\ng <- g + scale_color_manual(values = areaFcolors, name=\"Model\", guide=guide_legend(reverse=TRUE))\ng <- g + main_theme\ng <- g + theme(\n             axis.title = element_blank(),\n             legend.text =  element_text(),\n             legend.position=\"bottom\")\ng\nreturn(g)\n}\n# SS_graph(d, scalemax=200)\nSS_graph(d)\n\nF_text <- function(fun_EF, fun_dfF, fun_ER , fun_dfR ){\n  d <- create_data(fun_EF = fit_full, fun_dfF = df_full, fun_ER = fit_reduced, fun_dfR = df_reduced)\n  \n  dfD <- d[d$MS_label==\"MSR\", \"df_value\"]\n  dfF <- d[d$MS_label==\"MSE\", \"df_value\"]   \n  g <- ggplot2::ggplot(data=d)\n  g <- g + scale_x_continuous(limits=c(0,4))\n  # g <- g + scale_y_continuous(limits=c(-1,4))\n  g <- g + geom_text(mapping=aes(x = 0, y = rev(position)+1, color = model_label,\n                                 label = paste0(\n                                  d$SS_label, \" = \",  d$SS_value, \"  \",\n                                  d$df_label, \" = \",  d$df_value, \"  \",\n                                  d$MS_label, \" = \",  d$MS_value )),\n                     hjust=0)\n  g <- g + geom_text(aes(x=0, y = 1, label = paste0(\"F (\",dfD,\",\",dfF,\") = \", round(Ftest,2),\"  (observed)\")),hjust=0)\n  g <- g + geom_text(aes(x=0, y = 0, label = paste0(\"F (\",dfD,\",\",dfF,\") = \", round(Fcrit,2), \"  (95% crit)\")),hjust=0)\n  g <- g + scale_color_manual(values=areaFcolors)\n  g <- g + main_theme\n  g <- g + theme(axis.text.y =  element_blank(),\n               axis.text.x =  element_blank(),\n               axis.title.x = element_blank(),\n               axis.title.y = element_blank(),\n               legend.title = element_blank(),\n               legend.text =  element_text(),\n               legend.position=\"none\",\n               panel.grid = element_blank(),\n               panel.border = element_blank(),\n               axis.ticks = element_blank())\n  return(g)\n}\n# F_text(d)\n\nMS_graph <- function(d, maxMS=sqrt(max(d$MS_value))){\n  g <- ggplot2::ggplot() \n  g <- g + ggtitle(\"Misfit per degree of freedom\")\n  g <- g + geom_rect(data=d,\n                     mapping=aes(xmin=origin, xmax=sideMS, \n                                 ymin=origin, ymax=sideMS, color=model_label, fill=model_label), \n                     alpha=.1)\ng <- g + scale_x_continuous(name=\"x\", limits=c(0, maxMS))\ng <- g + scale_y_continuous(name=\"y\", limits=c(0, maxMS)) \n  g <- g + scale_fill_manual(values = areaFcolors, guide=FALSE)\n  g <- g + scale_color_manual(values = areaFcolors, name=\"Model\", guide=guide_legend(reverse=TRUE))\n  g <- g + main_theme\n  g <- g + theme(\n             # legend.title = element_text(),\n             legend.text =  element_text(),\n             legend.position=\"bottom\")\n  return(g)\n}\n# MS_graph(d, max=200)\n# MS_graph(d)\n\nvpLayout <- function(rowIndex, columnIndex) { return( viewport(layout.pos.row=rowIndex, layout.pos.col=columnIndex) ) }\nBuildMosaic <- function(fit_full, df_full, fit_reduced, df_reduced, scalemax){\n  \n# d <- create_data(fun_EF = fit_full, fun_dfF = df_full, fun_ER = fit_reduced, fun_dfR = df_reduced)\n#   \n#   Ftest <- d[d$MS_label==\"MSR\", \"MS_value\"] / d[d$MS_label==\"MSE\", \"MS_value\"]\n#   Fcrit <- qf(.95, df1=d[d$MS_label==\"MSR\", \"df_value\"], df2=d[d$MS_label==\"MSE\", \"df_value\"]) # find F critical\n#   # Is observed F statistically significant? Must be greater than critical value\n#   (statistical_significance <- Ftest >= Fcrit) \n# \n  \n\n\n  a <- SS_graph(fit_full=fit_full, df_full=df_full, fit_reduced=fit_reduced, df_reduced=df_reduced, scalemax=scalemax)\n  # b <- MS_graph(d, maxMS = max)\n  # c <- F_text(d)\n  \n#    grid.newpage()    \n#   #Defnie the relative proportions among the panels in the mosaic.\n#   layout <- grid.layout(nrow=3, ncol=3,\n#                         widths=unit(c(.36, .28, .36) ,c(\"null\", \"null\",\"null\")),\n#                         heights=unit(c(.38, .32, .2), c(\"null\", \"null\", \"null\")))\n#   pushViewport(viewport(layout=layout))\n#   print(a, vp=viewport(layout.pos.col=1))\n#   print(c, vp=vpLayout(2, 2))\n#   print(b, vp=viewport(layout.pos.col=3))\n#   popViewport(0)\n}\n# BuildMosaic(d, max = 300)\nBuildMosaic(120, 5, 336, 6, max=100)\n\n############# Alternative, using multiplot function ##############\n\n# See example:  http://sape.inf.usi.ch/quick-reference/ggplot2/geom_rect\n# scale_x_continuous(name=\"x\") + \n# scale_y_continuous(name=\"y\") +\n# geom_rect(data=d, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=t), color=\"black\", alpha=0.5) +\n# geom_text(data=d, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=r), size=4) +\n# opts(title=\"geom_rect\", plot.title=theme_text(size=40, vjust=1.5))\n\n\n\n\n## @knitr define_multi_plot_function\n\n# Multiple plot function\n#\n## http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/\n# ALTERNATIVELY: sources this function\n# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)\n# - cols:   Number of columns in layout\n# - layout: A matrix specifying the layout. If present, 'cols' is ignored.\n#\n# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),\n# then plot 1 will go in the upper left, 2 will go in the upper right, and\n# 3 will go all the way across the bottom.\n#\nmultiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {\n  library(grid)\n\n  # Make a list from the ... arguments and plotlist\n  plots <- c(list(...), plotlist)\n\n  numPlots = length(plots)\n\n  # If layout is NULL, then use 'cols' to determine layout\n  if (is.null(layout)) {\n    # Make the panel\n    # ncol: Number of columns of plots\n    # nrow: Number of rows needed, calculated from # of cols\n    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),\n                    ncol = cols, nrow = ceiling(numPlots/cols))\n  }\n\n if (numPlots==1) {\n    print(plots[[1]])\n\n  } else {\n    # Set up the page\n    grid.newpage()\n    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))\n\n    # Make each plot, in the correct location\n    for (i in 1:numPlots) {\n      # Get the i,j matrix positions of the regions that contain this subplot\n      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))\n\n      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,\n                                      layout.pos.col = matchidx$col))\n    }\n  }\n}\n\n# \n# # maximum <- sqrt(max(d$SS_value))\n# maximum <- 100\n# \n# areaF_graph_squares <- function(d){\n#    a <- SS_graph(d)\n#    b <- MS_graph(d)\n#    c <- F_text(d)\n#    a <- a + scale_y_continuous(limits=c(0,maximum))\n#    a <- a + scale_x_continuous(limits=c(0,maximum))\n#    b <- b + scale_y_continuous(limits=c(0,maximum))\n#    b <- b + scale_x_continuous(limits=c(0,maximum))\n#     # names <- names_tile(ds,\"physical_measure\")\n#     multiplot(a,c,b, cols=3)\n#     # return(g)\n# }\n# squares <- areaF_graph_squares(d)\n\n# areaF_graph <- function(d){\n#   squares <- areaF_graph_squares(d)\n#   text_graph <- F_text(d)\n#   g <- multiplot(squares, text_graph, cols=2)\n#   return(g)\n# }\n# g <- areaF_graph(d)\n\n############# alternative  ends #############\n\n\n\n\n\n\n\n",
    "created" : 1443426978132.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1200220698",
    "id" : "E24A1E79",
    "lastKnownWriteTime" : 1443423685,
    "path" : "~/GitHub/psy532/scripts/graphs/areaF_graphing_temp.R",
    "project_path" : "scripts/graphs/areaF_graphing_temp.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}