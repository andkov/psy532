{
    "contents" : "rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.\ncat(\"\\014\")\n\nsample_size <- 6\nEF <- 120\nER <- 336\nparsF <- 1 # the number of estimated parameters in the Full model (mean)\nparsR <- 0 # the number of estimated parameters in the Restricted model\n#### MISFIT ####\nSSE <- EF\nSST <- ER\nSSR <- SST - SSE\n\n\nEF # sum of squared error for the Full Model\nER # sum of squaare error for the Restricted Model\nER - EF # gain in accurcy / loss of misfit\n# collect squared error in a vector \n(SS_value <- c( EF, ER, ER - EF)) # Full , Restricted, Difference\n\n\ndfF <-  sample_size - parsF # degrees of freedom of the Full model\ndfR <- sample_size - parsR # degrees of freedom of the Restricted model\ndfD <- dfR - dfF # gain in simplicity / loss of complexity\n# collect degrees of freedom in a vector\n(df_value <- c(dfF, dfR, dfD))  \n\n\n\n(MSE <- EF / dfF) \n(MST <- ER / dfR) \n(MSR <- (ER - EF) / (dfR - dfF))\n(MS_value <- c(MSE, MST, MSR)) # squared discrepancy per degree of freedom\n(MS_value <-  SS_value / df_value) # alternative \n\n\n# Counterparts \nmodel_label <- c(\"Full\",  \"Restricted\",  \"Difference\")\nSS_Label     <- c(\"Error\", \"Total\",       \"Residual\")\nSS_label <-    c(\"SSE\",   \"SST\",         \"SSR\")\nMS_label <-    c(\"MSE\",   \"MST\",         \"MSR\")\ndf_label <-    c(\"df(F)\",   \"df(R)\",         \"df(D)\")\n\n\n\n# area <- misfit # analogy\narea <- SS_value\nside <- sqrt(area) # sides of the squares\norigin <- rep(1,3) # the bottom left corner of each square\nsideMS <- sqrt(MS_value)\n\n\n\n# Create dataset for graphing  \n(d <- data.frame(model_label, SS_Label, SS_label, SS_value, \n                 df_label, df_value, MS_label, MS_value, origin, area, side, sideMS))\n# create an auxilary column that numbers the models\n(d$position <-  c(3, 1, 2))\n# sort the dataframe in the descending order of model number\n(d <- d[order(d$position),])\n\n#### alt ds ####\n# # Create ds for graphing (alt)\n# model <-      rep(c(\"Full\",  \"Restricted\",  \"Difference\"), 3)\n# squares <-    rep(c(\"Error\", \"Total\",       \"Residual\"), 3)\n# label <-          c(\"SSE\",   \"SST\",         \"SSR\", \n#                     \"MSE\",   \"MST\",         \"MSR\",\n#                     \"df(F)\", \"df(R)\",       \"df(D)\")\n# value <-          as.numeric(c( SSE,     SST,           SSR,\n#                    # EF,      ER,            ER-EF,\n#                      MSE,     MST,           MSR,\n#                      dfF,     dfR,           dfD) )\n# \n# \n# (d <- as.data.frame(cbind(model, squares, label),stringsAsFactors = F))\n# (d$value <- as.numeric(value))\n# str(d)\n# d$origin <- rep(1, nrow(d))\n# d$side <- sqrt(d$value)\n# d$position <- rep(c(3,1,2),3)\n# d[d$label %in% df_label,\"origin\"] <- NA\n# d[d$label %in% df_label,\"side\"] <- NA\n# d\n\n#### GRAPH ####\n# create graph presets\n \nareaFcolors <- c( \"Full\"=\"blue\", \"Restricted\" = \"black\",\"Difference\" = \"red\")\nFtest <- d[d$MS_label==\"MSR\", \"MS_value\"] / d[d$MS_label==\"MSE\", \"MS_value\"]\nFcrit <- qf(.95, df1=dfD, df2=dfF) # find F critical\n# Is observed F statistically significant? Must be greater than critical value\n(statistical_significance <- Ftest >= Fcrit) \n\nstep <- 1\nlibrary(ggplot2)\nsource(\"./scripts/graphs/main_theme.R\")\n\nSS_graph <- function(d){\nstep <- max(d$SS_value)/100\ng <- ggplot2::ggplot() \ng <- g + scale_x_continuous(name=\"x\")\ng <- g + scale_y_continuous(name=\"y\") \ng <- g + geom_rect(data=d, \n                   mapping=aes(xmin=origin, xmax=side, ymin=origin, ymax=side, color=model_label, fill=model_label), \n                   alpha=.1)\ng <- g + geom_text(mapping=aes(x = origin + (step*.5), \n                               y = side - (step*.5), \n                               label = paste0(\n                                 d$SS_label, \" = \",  d$SS_value, \"  \",\n                                 d$df_label, \" = \",  d$df_value, \"  \",\n                                 d$MS_label, \" = \",  d$MS_value )),hjust=0)\ng <- g + geom_text(aes(x=step*1.5, y =step*4, label = paste0(\"F (\",dfD,\",\",dfF,\") = \", round(Ftest,2),\"  (observed)\")),hjust=0)\ng <- g + geom_text(aes(x=step*1.5, y =step*3, label = paste0(\"F (\",dfD,\",\",dfF,\") = \", round(Fcrit,2), \"  (95% crit)\")),hjust=0)\ng <- g + scale_color_manual(values = areaFcolors)\ng <- g + scale_fill_manual(values = areaFcolors)\ng <- g + main_theme\ng\nreturn(g)\n}\nSS_graph(d)\n\n\nMS_graph <- function(d){\nstep <- max(d$MS_value)/100\ng <- ggplot2::ggplot() \ng <- g + scale_x_continuous(name=\"x\")\ng <- g + scale_y_continuous(name=\"y\") \ng <- g + geom_rect(data=d, \n                   mapping=aes(xmin=origin, xmax=sideMS, ymin=origin, ymax=sideMS, color=model_label, fill=model_label), \n                   alpha=.1)\ng <- g + geom_text(mapping=aes(x = origin + (step*.4), \n                               y = sideMS - (step*.3), \n                               label = paste0(\n                                 d$SS_label, \" = \",  d$SS_value, \"  \",\n                                 d$df_label, \" = \",  d$df_value, \"  \",\n                                 d$MS_label, \" = \",  d$MS_value )),hjust=0)\ng <- g + geom_text(aes(x=step*1.5, y =step*4, label = paste0(\"F (\",dfD,\",\",dfF,\") = \", round(Ftest,2),\"  (observed)\")),hjust=0)\ng <- g + geom_text(aes(x=step*1.5, y =step*3, label = paste0(\"F (\",dfD,\",\",dfF,\") = \", round(Fcrit,2), \"  (95% crit)\")),hjust=0)\ng <- g + scale_color_manual(values = areaFcolors)\ng <- g + scale_fill_manual(values = areaFcolors)\ng <- g + main_theme\nreturn(g)\n}\nMS_graph(d)\n\n\n\n# See example:  http://sape.inf.usi.ch/quick-reference/ggplot2/geom_rect\n# scale_x_continuous(name=\"x\") + \n# scale_y_continuous(name=\"y\") +\n# geom_rect(data=d, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2, fill=t), color=\"black\", alpha=0.5) +\n# geom_text(data=d, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=r), size=4) +\n# opts(title=\"geom_rect\", plot.title=theme_text(size=40, vjust=1.5))\n\n\n\n#######################\n## @knitr define_multi_plot_function\n\n# Multiple plot function\n#\n## http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/\n# ALTERNATIVELY: sources this function\n# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)\n# - cols:   Number of columns in layout\n# - layout: A matrix specifying the layout. If present, 'cols' is ignored.\n#\n# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),\n# then plot 1 will go in the upper left, 2 will go in the upper right, and\n# 3 will go all the way across the bottom.\n#\nmultiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {\n  library(grid)\n\n  # Make a list from the ... arguments and plotlist\n  plots <- c(list(...), plotlist)\n\n  numPlots = length(plots)\n\n  # If layout is NULL, then use 'cols' to determine layout\n  if (is.null(layout)) {\n    # Make the panel\n    # ncol: Number of columns of plots\n    # nrow: Number of rows needed, calculated from # of cols\n    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),\n                    ncol = cols, nrow = ceiling(numPlots/cols))\n  }\n\n if (numPlots==1) {\n    print(plots[[1]])\n\n  } else {\n    # Set up the page\n    grid.newpage()\n    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))\n\n    # Make each plot, in the correct location\n    for (i in 1:numPlots) {\n      # Get the i,j matrix positions of the regions that contain this subplot\n      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))\n\n      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,\n                                      layout.pos.col = matchidx$col))\n    }\n  }\n}\n\n\n\nareaF_graph <- function(d){\n   a <- SS_graph(d)\n   b <- MS_graph(d)\n  \n#     a <- basic_tile(ds,\"study_name\")\n#     b <- basic_tile(ds,\"physical_measure\")\n#     c <- basic_tile(ds,\"model_type\")\n#     d <- basic_tile(ds,\"subgroup\")\n    # d <- d + theme(axis.text.y = element_text(vjust=1, angle=0, hjust=0))\n   a <- a + scale_y_continuous(limits=c(0,15))\n   a <- a + scale_x_continuous(limits=c(0,15))\n   b <- b + scale_y_continuous(limits=c(0,15))\n   b <- b + scale_x_continuous(limits=c(0,15))\n    # names <- names_tile(ds,\"physical_measure\")\n    multiplot(a, b, cols=2)\n    # return(g)\n}\nareaF_graph(d)\n\n\n\n",
    "created" : 1442806925015.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4152820494",
    "id" : "893FC777",
    "lastKnownWriteTime" : 1443158325,
    "path" : "~/GitHub/psy532/materials/lectures/F_as_area_comparison/areaF.R",
    "project_path" : "materials/lectures/F_as_area_comparison/areaF.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}