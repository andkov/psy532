{
    "contents" : "rm(list=ls(all=TRUE))\n# library(datasets)\n# library(ggplot2) # load ggplot\n# library(GPArotation)\n# library(psych)\n# library(plotrix)\n# library(sem)\n# library(stats)\n# library(corrplot)\n# library(corrgram)\nlibrary(car)\n\n# load custom functions\nsource(\"Steiger R Library Functions.R\")\nsource(\"http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt\")\n\n# Generate data for classroom examples \nN<-30\np <- 4\nvarnames<-c(\"Intelligence\"=\"IQ\",\n            \"Socio-Economic Status\"=\"SES\",\n            \"Parent Education\"=\"PEd\",\n            \"Cost of House\"=\"CoH\")\nvarmeans<-c(100, 7 , 15 , 272.9)\nvarstds<-c(15,3, 3, 70.0)\n# empty data matrix\nX<-matrix(numeric(0),N,p)\ncolnames(X)<-varnames\n# empty correlation matrix\nR<-matrix(numeric(0),p,p)\n# target correlation matrix                IQ\ncorrelations<-CompleteCorrelationMatrix(c(.20,#SES\n                                          .13,.10,#PEd\n                                          .12,.10,.15))#CoH\ncolnames(correlations)<-varnames\nrownames(correlations)<-varnames\n\ncovariances<-diag(varstds) %*% correlations %*% diag(varstds)\n\nX<-MakeExactData(varmeans,covariances,N)\ncolnames(X)<-varnames\nrownames(X)<-c(1:N)\nX<-data.frame(X)\nsummary(X) # gets basic descriptives of data\ncor(X)\n\n# output the generated data into folder\nlibrary(foreign)\nwrite.foreign(X, \"MR.txt\", \"MR.sas\",   package=\"SAS\")\n\n### Modeling begings ###\n\nmodel<-glm(data=X,\n  IQ ~ 1 + SES + PEd + CoH\n         )\n# library(base)\n# model<-lm(data=X,\n#            IQ ~ 1 + SES + PEd + CoH\n# )\n\nsummod<-summary(model)\nstr(summod)\n\nparest<-summod$coefficients   # parameter estimates \ndfE<- model$df.residual       # Error df              from PROC GLM\ndfT<- model$df.null           # Corrected Total df    from PROC GLM\ndfR<-dfT-dfE                  # df Residual\nSSE<-model$deviance           # SS Error              from PROC GLM\nSST<-model$null.deviance      # SS Corrected Total    from PROC GLM\nSSR<-SST-SSE                  # Sum of Squares Resisudal\nMSE<-SSE/dfE                  # Mean Square Error\nMSR<-SSR/dfR                  # Mean Square Residual\nSS1<-anova(model)             # Type I SS, control\nSS3<-Anova(model,type=\"III\")  # Type III SS, eliminate\n# Remember that F = MSR/MSE\ndfMT<-SS1[1] # degrees of freedom for each model term\ndfM<-SS1[3] # degrees of freedom for each model\n\nTypeI.SS<-SS1[2] # Type I SS\nTypeI.SS.cum<-SS1[4] # Type I SS cumulative\nTypeI.MS<-TypeI.SS/dfMT # Mean Square for Type I SS\nTypeI.F<-TypeI.MS/MSE # F-statistics for Type I analysis\n\n\nTypeIII.F <-(c(NA,SS3$LR)) # F-statistics for Type III analysis\nTypeIII.MS<-TypeIII.F*MSE # Mean Square for Type III SS\nTypeIII.P <-c(NA,t(SS3[3])) # p-value for each term eliminating others\nTypeIII.SS<-TypeIII.MS*dfMT # Type III SS\n\nresults<-cbind(dfMT,dfM,TypeIII.SS,TypeIII.MS,TypeIII.F,TypeIII.P,\n               TypeI.SS, TypeI.MS, TypeI.F)\ncolnames(results)<-c(\"dfTerm\",\"dfModel\",\"SS(III)\",\"MS(III)\",\"F(III)\",\"P(III)\",\n                     \"SS(I)\",\"MS(I)\",\"F(I)\")\n\n\n################# documentation ######################\n# compare models\nfit1 <- lm(y ~ x1 + x2 + x3 + x4, data=mydata)\nfit2 <- lm(y ~ x1 + x2)\nanova(fit1, fit2)\n\n# Other useful functions \nfit<-model\ncoefficients(fit) # model coefficients\nconfint(fit, level=0.95) # CIs for model parameters \nfitted(fit) # predicted values\nresiduals(fit) # residuals\nanova(fit) # anova table \nvcov(fit) # covariance matrix for model parameters \ninfluence(fit) # regression diagnostics\n\n ",
    "created" : 1443158428542.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2431418120",
    "id" : "2724D9E9",
    "lastKnownWriteTime" : 1443158854,
    "path" : "C:/Users/koval_000/Dropbox/Teach/Vandy/Guest.Lectures/Multiple.Regression/MR.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}