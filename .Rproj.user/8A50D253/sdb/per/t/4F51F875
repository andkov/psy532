{
    "contents" : "#The script was adapted from [Will Beasley's illustrations](https://github.com/OuhscBbmc/DeSheaToothakerIntroStats/blob/master/CommonCode/BookTheme.R)\n\n\n\n#For fonts, see Chang (2013) Recipe 14.6.  Install ghostscript (http://www.ghostscript.com/download/gsdnld.html),\n# before installing the `extrafont` package.\n#Run the following three lines of code once per machine (not once per session).\n# install.packages(\"extrafont\")\n# library(extrafont) \n# extrafont::font_import()\n# extrafont::fonts() #This just lists the available fonts for you to read; similar to extrafont::fonttable()\n\nlibrary(extrafont) \nlibrary(grid)\nlibrary(ggplot2)\nlibrary(dichromat)\nlibrary(RColorBrewer)\n\n#########################################################\n### Define theme elements for ggplot2 graphs\n#########################################################\n# Documentation for modifiable theme elements can be found at http://docs.ggplot2.org/current/theme.html\nmain_theme <- theme_bw() +\n  theme(axis.text = element_text(colour=\"gray40\")) +\n  theme(axis.title = element_text(colour=\"gray40\")) +\n  theme(panel.border = element_rect(colour=\"gray80\")) +\n  theme(axis.ticks = element_line(colour=\"gray80\"))\n\nNoGridOrYLabelsTheme <- main_theme  + \n  theme(axis.ticks.y = element_blank()) +\n  theme(panel.grid = element_blank()) +\n  theme(plot.margin=unit(c(.1,.2,.2,0), \"lines\"))\n\n#########################################################\n### Define palettes for variable sets, so they're consistent across graphs & chapters\n#########################################################\ntransformColor <- function( palette ) {\n  return( palette )\n#   return( dichromat(palette, \"deutan\") )\n#   return( dichromat(palette, \"protan\") )\n#   return( dichromat(palette, \"tritan\") )\n# Also see The Color Oracle application (http://colororacle.org/)\n}\n\nPalettePregancyDelivery <- transformColor(adjustcolor(brewer.pal(3, \"Accent\"), alpha.f=1)[1:2])\nPalettePregancyDeliveryBad <- transformColor( c(\"#FF0000CC\", \"#00FFFFCC\")) #Translucent red & cyan\n\nPalettePregancyGroup <- transformColor(adjustcolor(brewer.pal(3, \"Dark2\"), alpha.f=1)[1:2])\nPalettePregancyGroupLight <- adjustcolor(PalettePregancyGroup, alpha.f=.2)\nPalettePregancyGroupBad <- transformColor(adjustcolor(c(\"blue\", \"maroon\"), alpha.f=.7))\n\nPaletteObesityState <- transformColor(adjustcolor(brewer.pal(5, \"Set1\"))[c(1,2)])\nPaletteObesityState <- transformColor(adjustcolor(brewer.pal(5, \"Dark2\"))[c(2,3)])\n\nPaletteWorldDeathsRestricted <- transformColor(c(\"#497862\", \"#A54891\")) #Hand-picked\nPaletteWorldDeathsRestrictedFaint <- transformColor(adjustcolor(PaletteWorldDeathsRestricted, alpha.f=.2))\n\nPaletteControlPsqiLight <- transformColor(c(\"#1A7F7C\", \"#1595B2\")) #From http://colrd.com/palette/22521/; http://colrd.com/palette/18981/\nPaletteControlPsqiDark <- transformColor(c(\"#215f5c\", \"#225a88\")) #From http://colrd.com/palette/22521/; http://colrd.com/palette/18981/\n#\n\n#Use the same palette as the crit graphs in Chapters 10-12.\n#  * Purple is the distribution line\n#  * Blue corresponds to the observed values\n#  * Red corresponds to a 5% alpha\n#  * Orange corresponds to a 1% alpha\nbluish <- \"#1d00b2\" #\"http://colrd.com/color/0xff1d00b2/;  Others I tried: #230ca2\" #\"#000066\" #\"#0868ac\" ##5698c4\"\ngreenish <- \"#097168\" #http://colrd.com/palette/22444/\nPaletteCritical <- c(\"#544A8C\", \"#ce2b18\", \"#F37615\", bluish, greenish, \"gray60\") #Adapted from http://colrd.com/palette/17511/ (I made the purple lighter, the orange darker, and added the blue.)\nPaletteCriticalLight <- adjustcolor(PaletteCritical, alpha.f=.5)\nrm(bluish, greenish)\n# palettePregancy <- RColorBrewer::brewer.pal(n=4, name=\"Set2\")[3:4]\n# PaletteObesityState <-  adjustcolor(brewer.pal(4, \"Set2\"))[3:4]\n# PaletteObesityStateBad <- adjustcolor(c(\"green\", \"red\"), alpha.f=.7)\n\n#Named colors in R:\n# http://research.stowers-institute.org/efg/R/Color/Chart/ColorChart.pdf\n\n\n#########################################################\n### Declare functions used in multiple chapters\n#########################################################\n#This function is directly from Recipe 13.3 in Chang (2013).\nLimitRange <- function( fun, min, max ) { \n  function( x ) {\n    y <- fun(x)\n    y[(x < min) | (max < x)] <- NA\n    return( y )\n  }\n}\nDrawWithoutPanelClipping <- function( g ) {\n  gt <- ggplot_gtable(ggplot_build(g))\n  gt$layout$clip[gt$layout$name == \"panel\"] <- \"off\"\n  grid.draw(gt)\n}\nTukeyBoxplot <- function(y, width=.9, na.rm = FALSE, coef = 1.5, ...) {\n  #Adapted from https://github.com/hadley/ggplot2/blob/master/R/stat-boxplot.r\n  qs <- c(0, 0.25, 0.5, 0.75, 1)\n  stats <- as.numeric(quantile(y, qs, type=5))\n  names(stats) <- c(\"ymin\", \"lower\", \"middle\", \"upper\", \"ymax\")\n  \n  iqr <- diff(stats[c(2, 4)])\n  \n  outliers <- y < (stats[2] - coef * iqr) | y > (stats[4] + coef * iqr)\n  if (any(outliers)) stats[c(1, 5)] <- range(c(stats[2:4], y[!outliers]), na.rm=TRUE)    \n  \n  df <- as.data.frame(as.list(stats))\n  df$outliers <- I(list(y[outliers]))\n  \n  n <- sum(!is.na(y)) \n  \n  df$notchupper <- df$middle + 1.58 * iqr / sqrt(n)\n  df$notchlower <- df$middle - 1.58 * iqr / sqrt(n)\n  df$width <- width\n  return( df )\n} # TukeyBoxplot(dsPregnancy$BabyWeightInKG)\n\nRemoveLeadingZero <- function( x ) {\n  #   g <- grep(\"\\\\A\\\\b(?<=0)(\\\\.\\\\d{1,})$\", x, perl=TRUE, value=TRUE);\n  g <- gsub(\"\\\\b(0)(\\\\.\\\\d{1,})$\", \"\\\\2\", x, perl=TRUE);\n  return( g )\n} #\n# RemoveLeadingZero(0.444)\n# RemoveLeadingZero(431.444)\nWrapColumns <- function( d, wrapCount=3L ) {\n  rowCountOriginal <- nrow(d)\n  columnCountOriginal <- ncol(d)  \n  pad <- ((rowCountOriginal %% wrapCount) > 0)\n  rowCount <- (rowCountOriginal %/% wrapCount) + as.integer(pad)\n  \n  dt <- matrix(NA, nrow=rowCount, ncol=columnCountOriginal*wrapCount)\n  for( wrapIndex in seq_len(wrapCount) ) {\n    columnIndices <- (wrapIndex-1)*columnCountOriginal + seq_len(columnCountOriginal)\n    rowIndices <- (wrapIndex-1)*rowCount + seq_len(rowCount)\n    dt[, columnIndices] <- as.matrix(d[rowIndices, ])\n  }\n  dt <- ifelse(is.na(dt), \"\", dt)\n  dWide <- as.data.frame(dt, stringsAsFactors=F)\n  colnames(dWide) <- rep(colnames(d), times=wrapCount)\n  return( dWide )\n}\n\n\n#########################################################\n### Establish the font\n#########################################################\n## These three lines will use a nondefault font.\n# extrafont::loadfonts() #Run this once per session.\n# Sys.setenv(R_GSCMD = \"C:/Program Files/gs/gs9.10/bin/gswin64c.exe\")\n# main_theme <- main_theme +  theme(text = element_text(family=\"Times New Roman\"))\n\n#########################################################\n### Internal notes\n#########################################################\n# * The Pre-Press Manager said the dimensions of the images cannot exceed these dimensions: 33 picas wide x 51 picas tall. (5.5\" x 8.5\")\n# *Physical Page width 7\"x10\"\n\n# list.files(system.file(\"enc\", package=\"grDevices\"))\n\n#########################################################\n### Palettes to consider for future graphs\n#########################################################\n# https://github.com/jrnold/ggthemes\n# c(\"#043227\", \"#097168\", \"#ffcc88\", \"#fa482e\", \"#f4a32e\") #http://colrd.com/palette/22444/\n# c(\"#fea3aa\",\"#f8b88b\",\"#faf884\",\"#baed91\",\"#b2cefe\",\"#f2a2e8\") #http://colrd.com/palette/22780/",
    "created" : 1443111521021.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3310495535",
    "id" : "4F51F875",
    "lastKnownWriteTime" : 1443106932,
    "path" : "~/GitHub/psy532/scripts/graphs/main_theme.R",
    "project_path" : "scripts/graphs/main_theme.R",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "type" : "r_source"
}