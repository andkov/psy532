{
    "contents" : "# P312_HW03_KOVAL_ANDREY\n\ndata1<-c(1,2,3,4,5)# data for vector x\ndata2<-c(6,7,8,9,10)# data for vectore y\nnumrows<-5            # define the  number of rows in this matrix \n\nx<-matrix(data1,numrows,1)  # create 4 by 1 vector x; matrix(data,rows,columns)\nxT<-t(x)                    # row vector x, the transpose\nx; xT\n\nxTx<-(t(x)%*%x) # scalar      # sum of squared deviation from zero\nxxT<-(x%*%t(x)) # 4x4 matrix  # \n\nxTxInv<-solve(xT%*%x)   # get the inverse of the 1 by 1 matrix xTx\nxTxInv\n\n# Px (orthogonal projector of x) matrix to be used in all consequent operations\nPx<-x%*%xTxInv%*%xT\nPx\n\n# Creating comformable diagonal matrix\n(I<-diag(numrows))\n\n# Qx matrix to be used in all consequant operations\n(Qx<-I-Px)            \ndim(Px)\ndim(Qx)\n\n##########################################################################\n# (a) Prove that Px is idempotent. That is show that (Px)^2 = Px * Px = Px\n(matrix1a<- Px)\n(matrix2a<-(Px%*%Px))\nall.equal(matrix1a,matrix2a)\n#quod erat demonstrandum\n\n##########################################################################\n# (b) Prove that Px is symmetric. That is, show that Px = t(Px);\n(matrix1b<-Px)\n(matrix2b<-t(Px))\nall.equal(matrix1b,matrix2b)\n#quod erat demonstrandum\n\n##########################################################################\n# (c) Prove that a=Px*y is collinear with x, that is show that Px*y =c*x\ny<-matrix(data2,numrows,1) #  create 4 by 1 vector y\ny\n# remember that: \nxTx\nxxT\nPx # <-x%*%xTxInv%*%xT\na<-Px%*%y\na\n# If a is collinear with x, there must exist some scalar c such that c*x = Px*y\n# let's find this scalar\n# if Px == (x %*% xTxInv %*% xT) \n# then a == Px %*% y == (x %*% xTxInv %*% xT) %*% y\n# both (xTxInv)  and (xT %*% y) are scalars, as is their product \n# let's call this scalar (c)\nc<- xTxInv %*% xT %*% y\nc\n# then these two matrices should be equal\nmatrix1c<-x%*%c \nmatrix1c\nmatrix2c<-Px %*% y\nmatrix2c\nall.equal(matrix1c,matrix2c)\n#quod erat demonstrandum\n\n##########################################################################\n# d - prove that Qx is symmetric and idempotent\n# that is show that Qx = t(Qx) and  (Qx)^2 = Qx * Qx = Qx\n# Remember that Qx <-(I-Px)\nQx\n#symmetrix\nmatrix1d<-Qx\nmatrix2d<-t(Qx)\nall.equal(matrix1d,matrix2d)\n#idempotent\nmatrix3d<-Qx\nmatrix4d<-Qx %*% Qx\nall.equal(matrix3d,matrix4d)\n#quod erat demonstrandum\n\n##########################################################################\n# e -  let b = Qx*y, prove that b is orthogonal to a = Px*y\n# Remember that the properties of the orthogonal projector:\n# Px - doesn't not change the original vector x\n# Qx - renders the original vector x null\na<-Px %*% y\na\nb<-Qx %*% y\nb\nmatrix1e<-t(a) %*% b\nmatrix1e\nmatrix2e<-t(b) %*% a\nmatrix2e\nall.equal(matrix1e,matrix2e)\n#quod erat demonstrandum\n\n##########################################################################\n# f - show  that a + b = y\n# remember that a <- Px %*% y\n#               b <- Qx %*% y\nmatrix1f<- a + b  # == (Px %*% y) + (Qx %*% y)\nmatrix1f\nmatrix2f<- y\nmatrix2f\nall.equal(matrix1f,matrix2f)\n#quod erat demonstrandum\n\n##########################################################################\n# g - explain why x is in deviation form only when t(one) %*% x = 0\nx\nN<-numrows\none<-as.matrix(rep (c(1),N))\none\nsumofx<-t(one) %*% x\n# multiplying t(one) by x produces the sum of all the elements of x\n# to arrive for the value of mean of x, we need to devide sumofx by N\nmeanofx<-sumofx/N\n# by definition, x is in deviation form when meanofx == sumofx/N == 0\n# for this to hold sumofx must be 0\n# since  sumofx == t(one) %*% x, the vector x is in deviation form\n# if and only if t(one) %*% x = 0\n#quod erat demonstrandum\n\n##########################################################################\n# h - show that if data matrix X is in deviation form any linear combination\n# of X, i.e. Y = Xb, will also be in deviation score form\n\nX<-cbind(x,y)\nX\n\n#let's construct a matrix P, such that P is an N by N matrix, each of the\n# elements of which is 1/N\n(one %*% t(one))\nP<- (one %*% t(one))/N\nP\n# now let us construct a matrix Q, such that Q = I - P\nQ <- I - P\nQ\n# now we can use Q to put X into deviation score form by pre-multiplying X by Q\nXd<-Q %*% X \nXd\n# now let's create some linear combination of X\n# lc - vector containing the coeffictients of linear combination \n# in this case it's the difference between the first and the second columns\nlc<- as.matrix(c(1,-1),2,1)   \nlc\nZ<- Xd %*% lc \nZ\n# we've demonstrated previously that a vector is in deviation score form\n# if and only if t(one) %*% vector = 0\nQED<-as.integer(zapsmall(t(one) %*% Z))\nQED\n\n##########################################################################\n# explain why Q carries any vector of scores into deviation score form\n\nQ can be though of as a function of two things: the size of the vector x\n(contained in the only free value of Q matrix - N) \nand the mean of the vector x ( contained in the particular structure of Q\nmatrix, namely: all diagonal elements being N/(N-1) and \nall off-diagonal elements being -1/N ).\nSuch particular structure renders postmultiplying a random vector x by Q\nequivalent to substacting a mean of x from each element of x, that is\nbringing x into a deviation score form\n\n?lowess\n?loess\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1434567912024.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3343313634",
    "id" : "386C3FDC",
    "lastKnownWriteTime" : 1360537798,
    "path" : "C:/Users/koval_000/Dropbox/Courses/Multivariate_Vandy_Steiger/Homework Assignments/Homework 03 - Orthogonal Projectors/hm3.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}