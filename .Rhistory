ds$id <- seq_along(ds$height)
ds <- ds[,c("id","height","weight")]
ds
## @knitr inspect_ds
str(ds)
head(ds, 15)
## @knitr tweak_data
## @knitr in_to_cm
ds$h_cm <- ds$height * 2.54
## @knitr lbs_to_kg
ds$w_kg <- ds$weight * .454
## @knitr into_z
ds$h_z <- (ds$height - mean(ds$height))/sd(ds$height)
ds$w_z <- (ds$weight - mean(ds$weight))/sd(ds$weight)
## @knitr scale_function
ds$h_s <- base::scale(ds$height, center = TRUE, scale = TRUE)
ds$w_s <- base::scale(ds$weight, center = TRUE, scale = TRUE)
## @knitr remove_column_from_ds
drop <- c("h_s","w_s")
ds <- ds[!(names(ds) %in% drop)]
## @knitr
# ds <- datasets::women
# ds <- ds[-2]
## @knitr
Mh <- mean(ds$height)
Mw <- mean(ds$weight)
Mh; Mw
SDh <- sd(ds$height)
SDw <- sd(ds$weight)
SDh; SDw
ds$mean <-mean(ds$height)
ds$SD <- sd(ds$height)
ds$deviation <- ds$mean - ds$height
ds$z <- ds$deviation / ds$SD
ds
m1 <- lm(height ~ 1, ds)
m1
ds$m1 <- predict(m1)
ds
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
ds <- wages
ds <- Wage
ds
head(ds)
install.packages("ggvis")
library(ggvis)
mtcars
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_points(size := 25, shape := "diamond", stroke := "red", fill := NA)
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
ds <- Wage
head(ds)
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g
g <- g + geom_point()
g
g <- ggplot2::ggplot(data=ds, aes(x=year, wage))
g <- g + geom_point()
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_point()
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_boxplot()
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_boxplot(aes(fill=education))
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education))
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=FALSE)
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=TRUE)
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=TRUE)
g <- g + stat_summary(fun.y=median, geom="point", fill="white", shape=21, size=2.5)
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=TRUE)
g <- g + stat_summary(fun.y=median, geom="point", fill="white", shape=21, size=2.5)
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=TRUE)
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=2.5)
g <- g + geom_boxplot(width=.1, fill="black", outlier.colour=NA)
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=TRUE)
g <- g + geom_boxplot(width=.1, fill="black", outlier.colour=NA)
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=2.5)
g
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g <- g + geom_point()
g
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g <- g + geom_point()
g <- g + geom_smooth()
g
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g <- g + geom_point()
g <- g + geom_smooth(color=black, size=2)
g
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g <- g + geom_point()
g <- g + geom_smooth(color="black", size=2)
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line()
g
head(ds)
ds[1]
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=seq_along(ds[1])))
g
ds[-1]
View(ds)
str(ds)
rnames(ds)
rownames(ds)
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=rownames(ds)))
g
ds$id <- rownames(ds)
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=id))
g
ds
head(ds)
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=id))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=1))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(group=id)
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=id))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_smooth()
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + stat_summary(fun.y=mean, geom='line')
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + stat_summary(fun.y=lm, geom='line')
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + stat_summary(fun.y=lm(), geom='line')
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + stat_summary(fun.y=lm(ds), geom='line')
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + stat_summary(fun.y=1, geom='line')
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(x=as.numeric(year))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(x=year)
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(x=year))
g
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
ds <- Advertising
head(ds)
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
Advertising
advertising
??ISLR
?ISLR
library(ISLR)
getwd()
filePath <- file.path(getwd(),"materials/cases/advertising_sales/Advertising.csv")
filePath
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
filePath <- file.path(getwd(),"materials/cases/advertising_sales/Advertising.csv")
Advertising <- read.csv(filePath)
ds <- Advertising
head(ds)
ds
head(ds)
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smooth(color="black", size=2)
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_line(color="black", size=2)
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_line()
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smoth()
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smoth()
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smooth()
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smooth(method=lm)
g
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
ds <- Wage
head(ds)
library(ggplot2)
## @knitr wage_by_age
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g <- g + geom_point()
g <- g + geom_smooth(color="black", size=2)
g
## @knitr wage_by_year
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(x=year))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_smooth(aes(x=year))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_smooth()
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_smooth(method=lm)
g
library(HistData)
??"HistData"
ds <- Galton
ds
head(ds)
library(ISLR)
filePath <- file.path(getwd(),"materials/cases/advertising_sales/Advertising.csv")
Advertising <- read.csv(filePath)
ds <- Advertising
head(ds)
## @knitr sales_tv
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smooth(method=lm)
g
IQScores <- c(96, 102, 104, 104, 108, 110)
IQScores
sum(IQScores)
sigma <- sum(IQscores)
sigma
sigma <- sum(IQscores)
IQscores <- c(96, 102, 104, 104, 108, 110)
IQscores
sigma <- sum(IQscores)
sigma
ybar <- mean(IQscores)
ybar
ds <- data.frame(1,2)
ds
ds <- as.data.frame(IQscores)
ds
ds$reduced <- 98
ds
ds$eR
iq <- c(96, 102, 104, 104, 108, 110)
iq
sigma <- sum(iq)
sigma
ybar <- mean(iq)
ybar
# create data set with one column IQ and another empty
ds <- as.data.frame(iq)
ds
# full model: ysubi = mu + etasubiF
ds$reduced <- 98
ds
ds$eR <- ds$iq - ds$reduced
ds
iq <- c(96, 102, 104, 104, 108, 110)
iq
sigma <- sum(iq)
sigma
ybar <- mean(iq)
ybar
# create data set with one column IQ and another empty
# ds <- as.data.frame(iq)
# ds
#
# # full model: ysubi = mu + etasubiF
# ds$reduced <- 98
# ds
# ds$er <- ds$iq - ds$reduced
# ds
iq
sigma
mean(iq)
sd(iq)
sum(Iq)
sum(iq)
ybar
iq <- c(96, 102, 104, 104, 108, 110)
iq
sigma <- sum(iq)
sigma
ybar <- mean(iq)
ybar
# create data set with one column IQ and another empty
ds <- as.data.frame(iq)
ds
attach(ds)
reduced <- 98
ds
ds$reduced <- 98
ds
reduced
rm()
rm(all=T)
rm(ls())
rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
iq <- c(96, 102, 104, 104, 108, 110)
iq
sigma <- sum(iq)
sigma
ybar <- mean(iq)
ybar
# create data set with one column IQ and another empty
ds <- as.data.frame(iq)
ds
rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
iq <- c(96, 102, 104, 104, 108, 110)
iq
sigma <- sum(iq)
sigma
ybar <- mean(iq)
ybar
# create data set with one column IQ and another empty
ds <- as.data.frame(iq)
ds
attach(ds)
# full model: ysubi = mu + etasubiF
ds$reduced <- 98
ds
reduced
(ds$reduced <- 98)
rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
iq <- c(96, 102, 104, 104, 108, 110)
iq
sigma <- sum(iq)
ybar <- mean(iq)
# create data set with one column IQ and another empty
ds <- as.data.frame(iq)
(ds$reduced <- 98)
ds$er <- ds$iq - ds$reduced
ds
ds$full <- mean(ds$iq)
ds
ds$ef <- ds$iq - ds$full
ds
rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
iq <- c(96, 102, 104, 104, 108, 110)
iq
sigma <- sum(iq)
ybar <- mean(iq)
# create data set with one column IQ and another empty
ds <- as.data.frame(iq)
ds$reduced <- 98
ds$er <- ds$iq - ds$reduced
ds$full <- mean(ds$iq)
ds$ef <- ds$iq - ds$full
ds$er2 <- ds$er^2
ds$ef2 <- ds$ef^2
ds
sum(ds$ef)
ER <- sum(ds$ef2)
ER
EF <- sum(ds$er2)
EF
(ER - EF)
rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
iq <- c(96, 102, 104, 104, 108, 110)
iq
sigma <- sum(iq)
ybar <- mean(iq)
# create data set with one column IQ and another empty
ds <- as.data.frame(iq)
# Full
ds$full <- mean(ds$iq)
ds$ef <- ds$iq - ds$full
ds$ef2 <- ds$ef^2
# Reduced
ds$reduced <- 98
ds$er <- ds$iq - ds$reduced
ds$er2 <- ds$er^2
EF <- sum(ds$ef2) # sum of squared discrepancies from FULL
ER <- sum(ds$er2) # sum of squared discrepancies from REDUCED
dfF <- 5 # because we estimated the mean
dfR <- 6 # because there are 6 scores
MSR <- (ER - EF) / (dfR - dfF)
MSR
MSE <- EF / dfF
Ftest <- MSR / MSE
Ftest
lm(formula = iq ~ 1, x = ds)
lm(formula = iq ~ 1, ds)
sm <- lm(formula = iq ~ 1, ds)
sm
summary(sm)
sm <- glm(formula = iq ~ 1, ds)
sm <- glm(formula = iq ~ 1,data =  ds)
sm
summary(sm)
sm <-  lm(formula = iq ~ 1, data = ds)
sm <- glm(formula = iq ~ 1, data =  ds)
sm
summary(sm)
ds$yhat <- predict(sm)
ds
sm <- glm(formula = iq ~ I(1), data =  ds)
ds$yhat <- model(sm)
ds$yhat <- outcome(sm)
sm <-  lm(formula = iq = 1, data = ds)
sm <- glm(formula = iq ~ c(1), data =  ds)
sm <- glm(formula = iq ~ -1 + reduced, data =  ds)
sm
sm <- glm(formula = iq ~ 1 + reduced, data =  ds)
sm
sm <-  lm(formula = iq ~ 1 + reduced, data = ds)
sm
summary(sm)
sm <-  lm(formula = iq ~  reduced, data = ds)
sm
summary(sm)
ds$yhat <- predict(sm)
ds
ds
sm <-  lm(formula = iq ~ -1 + reduced, data = ds)
sm
sm
summary(sm)
ds <- as.data.frame(iq)
ds
rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
iq <- c(96, 102, 104, 104, 108, 110)
iq
sigma <- sum(iq)
ybar <- mean(iq)
# create data set with one column IQ and another empty
ds <- as.data.frame(iq)
# Full
ds$full <- mean(ds$iq)
ds$ef <- ds$iq - ds$full
ds$ef2 <- ds$ef^2
# Reduced
ds$reduced <- 98
ds$er <- ds$iq - ds$reduced
ds$er2 <- ds$er^2
EF <- sum(ds$ef2) # sum of squared discrepancies from FULL
ER <- sum(ds$er2) # sum of squared discrepancies from REDUCED
dfF <- 5 # because we estimated the mean
dfR <- 6 # because there are 6 scores
MSR <- (ER - EF) / (dfR - dfF)
MSE <- EF / dfF
Ftest <- MSR / MSE
Ftest
ds
ds <- ds[ ,c("iq","reduced","full")]
ds
