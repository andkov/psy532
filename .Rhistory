SSw
SSt <- sum((dsL$y - dsL$ydot)^2)
SSt
SSb
SSb <- sum((dsL$ydot - dsL$ybar)^2)
SSb
SSw + SSb
SSt
deltaE <- Er - Ef
deltaE
equal(SSb,delatE)
all.equal(SSb,delatE)
deltaE <- Er - Ef
all.equal(SSb,delatE)
rm(list=ls())
# enter the data from Maxwell & DeLaney (2004), table 3.3 on page 91
# outcome = global affect rating, higher = better mood
# groups : pleasant, neutral, and unpleasant
# load libraries we'll need for the project
library(dplyr)
# create three vectors each containing a set of scores from each
pleasant <- c(6,5,4,7,7,5,5,7,7,7)
neutral <- c(5,4,4,3,4,3,4,4,4,5)
unpleasant <- c(3,3,4,4,4,3,1,2,2,4)
#combine three vectors into a dataframe object named "ds"
ds <- cbind(pleasant, neutral, unpleasant)
ds <- as.data.frame(cbind(pleasant, neutral, unpleasant))
ds
#produce summary of variables with summary function from base package
(a <- summary(ds))
str(a)
#summarize variables with describe function from the psych package
(a <- psych::describe(ds))
str(a)
t(psych::describe(ds))
#compute the mean of each variable with dplyr
(a <- dplyr::summarise_each(ds, funs(mean)))
str(a)
a["pleasant"]
#create a list containing means using lapply
(M <- lapply(ds, mean))
str(M)
str(M["pleasant"])
str(M[["pleasant"]])
str(M["pleasant"][[1]])
as.numeric(M)
#create a list containing standard deviations using lapply
(SD <- lapply(ds, sd))
str(SD)
as.numeric(SD)
#################################################
# compute errors of pleasant group
(ds_pleasant <- as.data.frame(pleasant))
(ds_pleasant <- dplyr::rename(ds_pleasant, y = pleasant))
(ds_pleasant$error <- ds_pleasant$y - M["pleasant"][[1]])
(ds_pleasant$error2 <- ds_pleasant$error^2)
ds_pleasant
# compute errors of pleasant group
(ds_neutral <- as.data.frame(neutral))
(ds_neutral <- dplyr::rename(ds_neutral, y = neutral))
(ds_neutral$error <- ds_neutral$y - mean(ds_neutral$y))
(ds_neutral$error2 <- ds_neutral$error^2)
ds_neutral
y3 <- ds$unpleasant
e3 <- y3-mean(y3)
es3 <- e3^2
(ds_unpleasant <- as.data.frame(cbind(y3, e3, es3)))
y1 <- ds$pleasant
e1 <- y1-mean(y1)
es1 <- e1^2
(ds_pleasant <- as.data.frame(cbind(y1, e1, es1)))
y2 <- ds$neutral
e2 <- y2-mean(y2)
es2 <- e2^2
(ds_neutral <- as.data.frame(cbind(y2, e2, es2)))
# # write a function that computes error four our file
# compute_errors <- function(ds=ds, group="pleasant"){
#   df <- as.data.frame(ds[group])
#   names(df) <- "y"
#   df$error <- df$y - mean(df$y)
#   df$error2 <- df$error^2
#   return(df)
# }
# ds_pleasant <- compute_errors(ds=ds, group="pleasant")
# ds_neutral <- compute_errors(ds=ds, group="neutral")
# ds_unpleasant <- compute_errors(ds=ds, group="unpleasant")
table_3_4 <- cbind(ds_pleasant, ds_neutral, ds_unpleasant)
table_3_4
###################################################
ds
dsL <- tidyr::gather(ds, "group") #cheatsheet
dsL
head(dsL, 22)
dsL <- reshape2::melt(ds)
dsL <- dplyr::rename(dsL, group = variable)
dsL <- dplyr::rename(dsL, y = value )
str(dsL)
head(dsL, 22)
dsL$d1 <- ifelse(dsL$group=="pleasant", 1, 0)
dsL$d2 <- ifelse(dsL$group=="neutral", 1, 0)
dsL$d3 <- ifelse(dsL$group=="unpleasant", 1, 0)
head(dsL, 22)
dsL$m1 <- (sum(dsL$y * dsL$d1)/(sum(dsL$d1)))*dsL$d1
dsL$m2 <- (sum(dsL$y * dsL$d2)/(sum(dsL$d2)))*dsL$d2
dsL$m3 <- (sum(dsL$y * dsL$d3)/(sum(dsL$d3)))*dsL$d3
head(dsL, 22)
dsL$ybar <- dsL$m1 + dsL$m2 + dsL$m3
head(dsL, 22)
dsL <- dsL[c("y", "group","d1","d2","d3","ybar")]
dsL$ydot <- round(mean(dsL$y),2)
head(dsL, 22)
################################
m1 <- lm(y ~  group, data=dsL)
summary(m1)
# m2 <- glm(y ~ + group, data=dsL)
# summary(m2)
dsL$yhat <- predict(m1)
# dsL$yhat2 <- predict(m2)
dsL
###################################
## @knitr eq65
SSw <- sum((dsL$y - dsL$ybar)^2)
Ef <- SSw # within
##
SSt <- sum((dsL$y - dsL$ydot)^2)
Er <- SSt
##
SSb <- sum((dsL$ydot - dsL$ybar)^2)
deltaE <- Er - Ef
deltaE
all.equal(SSb,delatE)
all.equal(SSb,deltaE)
unique(dsL$group)
a <- length(levels(dsL$group))
a
dfF <- N - a
dfF
dfF <- N - a
N <- nrow(dsL) # length(dsL$y)
a <- length(levels(dsL$group))
dfF <- N - a
dfF
dfR <- N - 1
delta_df <- dfR - dfF
delta_df
delta_E
delta_E <- Er - Ef
delta_E
delta_E
delta_E/delta_df
Ef/dfF
Ftest <- MSR/MSR
Ftest
Ftest <- MSR/MSR
MSE <-  delta_E/delta_df
MSR <- Ef/dfF
Ftest <- MSR/MSR
Ftest
Ftest <- MSE/MSR
Ftest
m1
summary(m1)
Ftest
m2 <- glm(y ~ + group, data=dsL)
summary(m2)
ds
ds <- datasets::women
ds
ds$id <- seq_along(ds)
ds
ds$id <- seq_along(ds$height)
ds
ds <- ds[,c("id","height","weight")]
ds
ds <- datasets::women
ds$id <- seq_along(ds$height)
ds <- ds["id","height","weight"]
ds <- ds[,c("id","height","weight")]
ds
str(ds)
head(ds, 15)
ds$h_cm <- ds$height * 2.54
ds
ds$w_kg <- ds$weight * .454
ds
ds$h_z <- (ds$height - mean(ds$height))/sd(ds$height)
ds
ds
ds$h_s <- base::scale(ds$height, center = TRUE, scale = TRUE)
ds
ds$w_s <- base::scale(ds$weight, center = TRUE, scale = TRUE)
ds
drop <- c("h_s","w_s")
ds <- ds[!(names(ds) %in% drop)]
ds
ds <- datasets::women
ds <- ds[-2]
## @knitr
Mh <- mean(ds$height)
Mw <- mean(ds$weight)
Mh; Mw
ds <- datasets::women
ds <- ds[-2]
ds
Mh <- mean(ds$height)
Mh
Mw <- mean(ds$weight)
Mw
cat("\f")
rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
options(digits = 3)
## @knitr load_sources
## @knitr load_packages
library(dplyr) # for data manipulation
library(ggplot2) # for graphing
library(scales) #for formating values in graphs
library(HistData)
library(testit, quietly=TRUE) #For asserts
library(ISLR)
## @knitr declare_globals
## @knitr load_data
# https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/women.html
ds <- datasets::women
ds$id <- seq_along(ds$height)
ds <- ds[,c("id","height","weight")]
ds
## @knitr inspect_ds
str(ds)
head(ds, 15)
## @knitr tweak_data
## @knitr in_to_cm
ds$h_cm <- ds$height * 2.54
## @knitr lbs_to_kg
ds$w_kg <- ds$weight * .454
## @knitr into_z
ds$h_z <- (ds$height - mean(ds$height))/sd(ds$height)
ds$w_z <- (ds$weight - mean(ds$weight))/sd(ds$weight)
## @knitr scale_function
ds$h_s <- base::scale(ds$height, center = TRUE, scale = TRUE)
ds$w_s <- base::scale(ds$weight, center = TRUE, scale = TRUE)
## @knitr remove_column_from_ds
drop <- c("h_s","w_s")
ds <- ds[!(names(ds) %in% drop)]
## @knitr
# ds <- datasets::women
# ds <- ds[-2]
## @knitr
Mh <- mean(ds$height)
Mw <- mean(ds$weight)
Mh; Mw
SDh <- sd(ds$height)
SDw <- sd(ds$weight)
SDh; SDw
ds$mean <-mean(ds$height)
ds$SD <- sd(ds$height)
ds$deviation <- ds$mean - ds$height
ds$z <- ds$deviation / ds$SD
ds
m1 <- lm(height ~ 1, ds)
m1
ds$m1 <- predict(m1)
ds
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
ds <- wages
ds <- Wage
ds
head(ds)
install.packages("ggvis")
library(ggvis)
mtcars
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_points(size := 25, shape := "diamond", stroke := "red", fill := NA)
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
ds <- Wage
head(ds)
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g
g <- g + geom_point()
g
g <- ggplot2::ggplot(data=ds, aes(x=year, wage))
g <- g + geom_point()
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_point()
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_boxplot()
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_boxplot(aes(fill=education))
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education))
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=FALSE)
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=TRUE)
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=TRUE)
g <- g + stat_summary(fun.y=median, geom="point", fill="white", shape=21, size=2.5)
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=TRUE)
g <- g + stat_summary(fun.y=median, geom="point", fill="white", shape=21, size=2.5)
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=TRUE)
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=2.5)
g <- g + geom_boxplot(width=.1, fill="black", outlier.colour=NA)
g
g <- ggplot2::ggplot(data=ds, aes(x=education, y=wage))
g <- g + geom_violin(aes(fill=education), trim=TRUE)
g <- g + geom_boxplot(width=.1, fill="black", outlier.colour=NA)
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=2.5)
g
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g <- g + geom_point()
g
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g <- g + geom_point()
g <- g + geom_smooth()
g
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g <- g + geom_point()
g <- g + geom_smooth(color=black, size=2)
g
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g <- g + geom_point()
g <- g + geom_smooth(color="black", size=2)
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line()
g
head(ds)
ds[1]
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=seq_along(ds[1])))
g
ds[-1]
View(ds)
str(ds)
rnames(ds)
rownames(ds)
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=rownames(ds)))
g
ds$id <- rownames(ds)
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=id))
g
ds
head(ds)
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=id))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=1))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(group=id)
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(group=id))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_smooth()
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + stat_summary(fun.y=mean, geom='line')
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + stat_summary(fun.y=lm, geom='line')
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + stat_summary(fun.y=lm(), geom='line')
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + stat_summary(fun.y=lm(ds), geom='line')
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + stat_summary(fun.y=1, geom='line')
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(x=as.numeric(year))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(x=year)
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(x=year))
g
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
ds <- Advertising
head(ds)
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
Advertising
advertising
??ISLR
?ISLR
library(ISLR)
getwd()
filePath <- file.path(getwd(),"materials/cases/advertising_sales/Advertising.csv")
filePath
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
filePath <- file.path(getwd(),"materials/cases/advertising_sales/Advertising.csv")
Advertising <- read.csv(filePath)
ds <- Advertising
head(ds)
ds
head(ds)
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smooth(color="black", size=2)
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_line(color="black", size=2)
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_line()
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smoth()
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smoth()
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smooth()
g
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smooth(method=lm)
g
# replicate the Figure 1.1 from James et al, p.2.
rm(list=ls())
library(ISLR)
ds <- Wage
head(ds)
library(ggplot2)
## @knitr wage_by_age
g <- ggplot2::ggplot(data=ds, aes(x=age, y=wage))
g <- g + geom_point()
g <- g + geom_smooth(color="black", size=2)
g
## @knitr wage_by_year
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_line(aes(x=year))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_smooth(aes(x=year))
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_smooth()
g
g <- ggplot2::ggplot(data=ds, aes(x=year, y=wage))
g <- g + geom_point()
g <- g + geom_smooth(method=lm)
g
library(HistData)
??"HistData"
ds <- Galton
ds
head(ds)
library(ISLR)
filePath <- file.path(getwd(),"materials/cases/advertising_sales/Advertising.csv")
Advertising <- read.csv(filePath)
ds <- Advertising
head(ds)
## @knitr sales_tv
g <- ggplot2::ggplot(data=ds, aes(x=TV, y=Sales))
g <- g + geom_point()
g <- g + geom_smooth(method=lm)
g
